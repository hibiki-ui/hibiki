#!/usr/bin/env python3
"""
Hibiki UI v4.0 - ÂØåÊñáÊú¨ÊîØÊåÅÁ≥ªÁªü
Êèê‰æõNSAttributedStringÁöÑÂÆåÊï¥ÂäüËÉΩÂ∞ÅË£Ö
"""

from typing import Optional, Dict, Any, Union, List, Tuple
from dataclasses import dataclass
from enum import Enum
from AppKit import NSColor, NSFont, NSMutableAttributedString, NSRange
from Foundation import NSAttributedString, NSMakeRange

from .logging import get_logger

logger = get_logger("core.rich_text")
logger.setLevel("INFO")


class TextStyle(Enum):
    """ÊñáÊú¨Ê†∑ÂºèÊûö‰∏æ"""
    NORMAL = "normal"
    BOLD = "bold"
    ITALIC = "italic" 
    BOLD_ITALIC = "bold_italic"


class UnderlineStyle(Enum):
    """‰∏ãÂàíÁ∫øÊ†∑ÂºèÊûö‰∏æ"""
    NONE = 0
    SINGLE = 1
    THICK = 2
    DOUBLE = 9


class StrikethroughStyle(Enum):
    """Âà†Èô§Á∫øÊ†∑ÂºèÊûö‰∏æ"""
    NONE = 0
    SINGLE = 1
    THICK = 2
    DOUBLE = 9


@dataclass
class TextAttributes:
    """ÊñáÊú¨Â±ûÊÄßÈÖçÁΩÆÁ±ª"""
    
    # Âü∫Á°ÄÂ±ûÊÄß
    font_name: Optional[str] = None
    font_size: Optional[float] = None
    text_style: TextStyle = TextStyle.NORMAL
    
    # È¢úËâ≤Â±ûÊÄß
    foreground_color: Optional[str] = None  # ÂâçÊôØËâ≤ (ÊñáÂ≠óÈ¢úËâ≤)
    background_color: Optional[str] = None  # ËÉåÊôØËâ≤
    
    # Ë£ÖÈ•∞Â±ûÊÄß
    underline_style: UnderlineStyle = UnderlineStyle.NONE
    underline_color: Optional[str] = None
    strikethrough_style: StrikethroughStyle = StrikethroughStyle.NONE
    strikethrough_color: Optional[str] = None
    
    # Â∏ÉÂ±ÄÂ±ûÊÄß
    baseline_offset: Optional[float] = None  # Âü∫Á∫øÂÅèÁßª
    kern: Optional[float] = None  # Â≠óÁ¨¶Èó¥Ë∑ù
    tracking: Optional[float] = None  # Â≠óÊØçÈó¥Ë∑ù
    
    # ÁâπÊÆäÊïàÊûú
    stroke_width: Optional[float] = None  # ÊèèËæπÂÆΩÂ∫¶
    stroke_color: Optional[str] = None  # ÊèèËæπÈ¢úËâ≤


@dataclass 
class TextSegment:
    """ÊñáÊú¨ÁâáÊÆµ - Áî®‰∫éÊûÑÂª∫ÂØåÊñáÊú¨"""
    text: str
    attributes: Optional[TextAttributes] = None
    
    def __post_init__(self):
        if self.attributes is None:
            self.attributes = TextAttributes()


class RichTextBuilder:
    """ÂØåÊñáÊú¨ÊûÑÂª∫Âô®"""
    
    def __init__(self):
        self.segments: List[TextSegment] = []
        self.default_attributes = TextAttributes()
    
    def set_default_attributes(self, attributes: TextAttributes) -> "RichTextBuilder":
        """ËÆæÁΩÆÈªòËÆ§Â±ûÊÄß"""
        self.default_attributes = attributes
        return self
    
    def add_text(self, text: str, attributes: Optional[TextAttributes] = None) -> "RichTextBuilder":
        """Ê∑ªÂä†ÊñáÊú¨ÁâáÊÆµ"""
        if attributes is None:
            attributes = self.default_attributes
        self.segments.append(TextSegment(text, attributes))
        return self
    
    def add_bold_text(self, text: str, color: Optional[str] = None, **kwargs) -> "RichTextBuilder":
        """Ê∑ªÂä†Á≤ó‰ΩìÊñáÊú¨"""
        if color:
            kwargs['foreground_color'] = color
        attrs = TextAttributes(text_style=TextStyle.BOLD, **kwargs)
        return self.add_text(text, attrs)
    
    def add_italic_text(self, text: str, color: Optional[str] = None, **kwargs) -> "RichTextBuilder":
        """Ê∑ªÂä†Êñú‰ΩìÊñáÊú¨"""
        if color:
            kwargs['foreground_color'] = color
        attrs = TextAttributes(text_style=TextStyle.ITALIC, **kwargs)
        return self.add_text(text, attrs)
    
    def add_underlined_text(self, text: str, underline_style: UnderlineStyle = UnderlineStyle.SINGLE, color: Optional[str] = None, **kwargs) -> "RichTextBuilder":
        """Ê∑ªÂä†‰∏ãÂàíÁ∫øÊñáÊú¨"""
        if color:
            kwargs['foreground_color'] = color
        attrs = TextAttributes(underline_style=underline_style, **kwargs)
        return self.add_text(text, attrs)
    
    def add_colored_text(self, text: str, color: str, **kwargs) -> "RichTextBuilder":
        """Ê∑ªÂä†ÂΩ©Ëâ≤ÊñáÊú¨"""
        attrs = TextAttributes(foreground_color=color, **kwargs)
        return self.add_text(text, attrs)
    
    def add_highlighted_text(self, text: str, background_color: str, **kwargs) -> "RichTextBuilder":
        """Ê∑ªÂä†È´ò‰∫ÆÊñáÊú¨"""
        attrs = TextAttributes(background_color=background_color, **kwargs)
        return self.add_text(text, attrs)
    
    def build(self) -> NSMutableAttributedString:
        """ÊûÑÂª∫NSAttributedString"""
        if not self.segments:
            return NSMutableAttributedString.alloc().initWithString_("")
        
        result = NSMutableAttributedString.alloc().init()
        
        for segment in self.segments:
            attributed_segment = self._create_attributed_string(segment.text, segment.attributes)
            result.appendAttributedString_(attributed_segment)
        
        logger.debug(f"üé® ÂØåÊñáÊú¨ÊûÑÂª∫ÂÆåÊàê: {len(self.segments)} ‰∏™ÁâáÊÆµ")
        return result
    
    def _create_attributed_string(self, text: str, attributes: TextAttributes) -> NSAttributedString:
        """ÂàõÂª∫Âçï‰∏™ÊñáÊú¨ÁâáÊÆµÁöÑNSAttributedString"""
        attr_dict = {}
        
        # PyObjC NSAttributedString attribute names
        NSFontAttributeName = "NSFont"
        NSForegroundColorAttributeName = "NSColor"
        NSBackgroundColorAttributeName = "NSBackgroundColor"
        NSUnderlineStyleAttributeName = "NSUnderline"
        NSUnderlineColorAttributeName = "NSUnderlineColor"
        NSStrikethroughStyleAttributeName = "NSStrikethrough"
        NSStrikethroughColorAttributeName = "NSStrikethroughColor"
        NSBaselineOffsetAttributeName = "NSBaselineOffset"
        NSKernAttributeName = "NSKern"
        NSStrokeWidthAttributeName = "NSStrokeWidth"
        NSStrokeColorAttributeName = "NSStrokeColor"
        
        # ËÆæÁΩÆÂ≠ó‰Ωì
        font = self._create_font(attributes)
        if font:
            attr_dict[NSFontAttributeName] = font
        
        # ËÆæÁΩÆÂâçÊôØËâ≤
        if attributes.foreground_color:
            color = self._parse_color(attributes.foreground_color)
            attr_dict[NSForegroundColorAttributeName] = color
        
        # ËÆæÁΩÆËÉåÊôØËâ≤
        if attributes.background_color:
            bg_color = self._parse_color(attributes.background_color)
            attr_dict[NSBackgroundColorAttributeName] = bg_color
        
        # ËÆæÁΩÆ‰∏ãÂàíÁ∫ø
        if attributes.underline_style != UnderlineStyle.NONE:
            attr_dict[NSUnderlineStyleAttributeName] = attributes.underline_style.value
            
            if attributes.underline_color:
                underline_color = self._parse_color(attributes.underline_color)
                attr_dict[NSUnderlineColorAttributeName] = underline_color
        
        # ËÆæÁΩÆÂà†Èô§Á∫ø
        if attributes.strikethrough_style != StrikethroughStyle.NONE:
            attr_dict[NSStrikethroughStyleAttributeName] = attributes.strikethrough_style.value
            
            if attributes.strikethrough_color:
                strike_color = self._parse_color(attributes.strikethrough_color)
                attr_dict[NSStrikethroughColorAttributeName] = strike_color
        
        # ËÆæÁΩÆÂü∫Á∫øÂÅèÁßª
        if attributes.baseline_offset is not None:
            attr_dict[NSBaselineOffsetAttributeName] = attributes.baseline_offset
        
        # ËÆæÁΩÆÂ≠óÁ¨¶Èó¥Ë∑ù
        if attributes.kern is not None:
            attr_dict[NSKernAttributeName] = attributes.kern
        
        # ËÆæÁΩÆÊèèËæπ
        if attributes.stroke_width is not None:
            attr_dict[NSStrokeWidthAttributeName] = attributes.stroke_width
            
            if attributes.stroke_color:
                stroke_color = self._parse_color(attributes.stroke_color)
                attr_dict[NSStrokeColorAttributeName] = stroke_color
        
        return NSAttributedString.alloc().initWithString_attributes_(text, attr_dict)
    
    def _create_font(self, attributes: TextAttributes) -> Optional[NSFont]:
        """ÂàõÂª∫NSFontÂØπË±°"""
        font_name = attributes.font_name
        font_size = attributes.font_size or 13.0
        
        # Ê†πÊçÆÊ†∑ÂºèË∞ÉÊï¥Â≠ó‰Ωì
        if attributes.text_style == TextStyle.BOLD:
            return NSFont.boldSystemFontOfSize_(font_size)
        elif attributes.text_style == TextStyle.ITALIC:
            # ÁÆÄÂåñÂ§ÑÁêÜÔºåÁõ¥Êé•ËøîÂõûÁ≥ªÁªüÂ≠ó‰ΩìÔºàÊñú‰ΩìÂú®NSAttributedString‰∏≠ÈÄöËøáÂÖ∂‰ªñÊñπÂºèÂÆûÁé∞Ôºâ
            return NSFont.systemFontOfSize_(font_size)
        elif attributes.text_style == TextStyle.BOLD_ITALIC:
            # ÁÆÄÂåñÂ§ÑÁêÜÔºåËøîÂõûÁ≤ó‰ΩìÂ≠ó‰Ωì
            return NSFont.boldSystemFontOfSize_(font_size)
        else:
            # ‰ΩøÁî®ÊåáÂÆöÂ≠ó‰ΩìÂêçÁß∞ÊàñÁ≥ªÁªüÂ≠ó‰Ωì
            if font_name:
                font = NSFont.fontWithName_size_(font_name, font_size)
                return font if font else NSFont.systemFontOfSize_(font_size)
            else:
                return NSFont.systemFontOfSize_(font_size)
    
    def _parse_color(self, color_str: str) -> NSColor:
        """Ëß£ÊûêÈ¢úËâ≤Â≠óÁ¨¶‰∏≤‰∏∫NSColor"""
        if color_str.startswith('#'):
            hex_color = color_str[1:]
            if len(hex_color) == 6:
                r = int(hex_color[0:2], 16) / 255.0
                g = int(hex_color[2:4], 16) / 255.0
                b = int(hex_color[4:6], 16) / 255.0
                return NSColor.colorWithRed_green_blue_alpha_(r, g, b, 1.0)
            elif len(hex_color) == 8:  # ÊîØÊåÅRGBAÊ†ºÂºè
                r = int(hex_color[0:2], 16) / 255.0
                g = int(hex_color[2:4], 16) / 255.0
                b = int(hex_color[4:6], 16) / 255.0
                a = int(hex_color[6:8], 16) / 255.0
                return NSColor.colorWithRed_green_blue_alpha_(r, g, b, a)
        
        # ÊîØÊåÅÂ∏∏ËßÅÈ¢úËâ≤ÂêçÁß∞
        color_names = {
            'black': NSColor.blackColor(),
            'white': NSColor.whiteColor(),
            'red': NSColor.redColor(),
            'green': NSColor.greenColor(),
            'blue': NSColor.blueColor(),
            'yellow': NSColor.yellowColor(),
            'orange': NSColor.orangeColor(),
            'purple': NSColor.purpleColor(),
            'gray': NSColor.grayColor(),
            'lightGray': NSColor.lightGrayColor(),
            'darkGray': NSColor.darkGrayColor(),
        }
        
        if color_str in color_names:
            return color_names[color_str]
        
        # ÈªòËÆ§ËøîÂõûÈªëËâ≤
        return NSColor.blackColor()


class RichText:
    """ÂØåÊñáÊú¨‰æøÊç∑Êé•Âè£Á±ª"""
    
    @staticmethod
    def create(text: str = "") -> RichTextBuilder:
        """ÂàõÂª∫ÂØåÊñáÊú¨ÊûÑÂª∫Âô®"""
        builder = RichTextBuilder()
        if text:
            builder.add_text(text)
        return builder
    
    @staticmethod
    def simple_attributed_string(
        text: str,
        font_name: Optional[str] = None,
        font_size: Optional[float] = None,
        color: Optional[str] = None,
        bold: bool = False,
        italic: bool = False,
        underlined: bool = False
    ) -> NSAttributedString:
        """ÂàõÂª∫ÁÆÄÂçïÁöÑÂØåÊñáÊú¨Â≠óÁ¨¶‰∏≤"""
        
        # Á°ÆÂÆöÊñáÊú¨Ê†∑Âºè
        if bold and italic:
            text_style = TextStyle.BOLD_ITALIC
        elif bold:
            text_style = TextStyle.BOLD
        elif italic:
            text_style = TextStyle.ITALIC
        else:
            text_style = TextStyle.NORMAL
        
        # Á°ÆÂÆö‰∏ãÂàíÁ∫øÊ†∑Âºè
        underline_style = UnderlineStyle.SINGLE if underlined else UnderlineStyle.NONE
        
        # ÂàõÂª∫Â±ûÊÄß
        attributes = TextAttributes(
            font_name=font_name,
            font_size=font_size,
            text_style=text_style,
            foreground_color=color,
            underline_style=underline_style
        )
        
        # ÊûÑÂª∫ÂØåÊñáÊú¨
        builder = RichTextBuilder()
        builder.add_text(text, attributes)
        return builder.build()
    
    @staticmethod
    def markdown_like_text(text: str) -> NSAttributedString:
        """Ëß£ÊûêÁ±ª‰ººMarkdownÁöÑÁÆÄÂçïÊ†ºÂºè"""
        # ËøôÊòØ‰∏Ä‰∏™ÁÆÄÂåñÁâàÊú¨ÔºåÊîØÊåÅÂü∫Êú¨ÁöÑ **Á≤ó‰Ωì** Âíå *Êñú‰Ωì* ËØ≠Ê≥ï
        builder = RichTextBuilder()
        
        import re
        
        # ÂåπÈÖç **Á≤ó‰Ωì** Âíå *Êñú‰Ωì*
        pattern = r'(\*\*([^*]+)\*\*|\*([^*]+)\*|([^*]+))'
        
        for match in re.finditer(pattern, text):
            full_match = match.group(1)
            bold_text = match.group(2)
            italic_text = match.group(3)
            normal_text = match.group(4)
            
            if bold_text:
                builder.add_bold_text(bold_text)
            elif italic_text:
                builder.add_italic_text(italic_text)
            elif normal_text:
                builder.add_text(normal_text)
        
        return builder.build()


# ÂØºÂá∫ÁöÑ‰æøÊç∑ÂáΩÊï∞
def rich_text() -> RichTextBuilder:
    """ÂàõÂª∫ÂØåÊñáÊú¨ÊûÑÂª∫Âô®ÁöÑ‰æøÊç∑ÂáΩÊï∞"""
    return RichText.create()


def attributed_string(
    text: str,
    **kwargs
) -> NSAttributedString:
    """ÂàõÂª∫ÁÆÄÂçïÂØåÊñáÊú¨ÁöÑ‰æøÊç∑ÂáΩÊï∞"""
    return RichText.simple_attributed_string(text, **kwargs)


def markdown_text(text: str) -> NSAttributedString:
    """ÂàõÂª∫Á±ªMarkdownÊ†ºÂºèÊñáÊú¨ÁöÑ‰æøÊç∑ÂáΩÊï∞"""
    return RichText.markdown_like_text(text)