#!/usr/bin/env python3
"""
Hibiki UI v4.0 Â∏ÉÂ±ÄÂºïÊìé
Áõ¥Êé•ÈõÜÊàêStretchableÔºåÊèê‰æõÁé∞‰ª£ÂåñÁöÑCSS-likeÂ∏ÉÂ±ÄËÉΩÂäõ
ÂÆåÂÖ®Áã¨Á´ãÁöÑv4Êû∂ÊûÑÂÆûÁé∞Ôºå‰∏ç‰æùËµñÊóßÁâàÊú¨‰ª£Á†Å
"""

from typing import Optional, Tuple, Dict, Any, List
from dataclasses import dataclass
from enum import Enum
import time

# Áõ¥Êé•ÂØºÂÖ•Stretchable - ËøôÊòØÂ§ñÈÉ®‰æùËµñÔºå‰∏çÊòØÊóßÁâàÊú¨‰ª£Á†Å
import stretchable as st
from stretchable.style import (
    Display as StDisplay,
    FlexDirection as StFlexDirection,
    AlignItems as StAlignItems,
    JustifyContent as StJustifyContent,
    Position as StPosition,
    Length,
    Size,
    Rect,
    PCT,
)

from .styles import (
    ComponentStyle,
    Display,
    FlexDirection,
    AlignItems,
    JustifyContent,
    Length as V4Length,
    LengthUnit,
    px,
)
from .managers import Position as V4Position

from .logging import get_logger

logger = get_logger("layout")
logger.setLevel("INFO")


@dataclass
class LayoutResult:
    """Â∏ÉÂ±ÄËÆ°ÁÆóÁªìÊûú"""

    x: float
    y: float
    width: float
    height: float
    content_width: float
    content_height: float
    compute_time: float  # ËÆ°ÁÆóËÄóÊó∂(ÊØ´Áßí)


class V4StyleConverter:
    """v4Ê†∑ÂºèÂà∞StretchableÊ†∑ÂºèÁöÑËΩ¨Êç¢Âô®"""

    @staticmethod
    def convert_to_stretchable_style(v4_style: ComponentStyle) -> st.Style:
        """Â∞Üv4 ComponentStyleËΩ¨Êç¢‰∏∫Stretchable Style"""
        kwargs = {}

        # DisplayËΩ¨Êç¢
        if v4_style.display == Display.FLEX:
            kwargs["display"] = StDisplay.FLEX
        elif v4_style.display == Display.BLOCK:
            kwargs["display"] = StDisplay.BLOCK
        elif v4_style.display == Display.GRID:
            kwargs["display"] = StDisplay.GRID
            logger.debug("üéØ ‰ΩøÁî®ÂéüÁîüGridÂ∏ÉÂ±Ä")
        elif v4_style.display == Display.NONE:
            kwargs["display"] = StDisplay.NONE

        # PositionËΩ¨Êç¢
        if v4_style.position == V4Position.RELATIVE:
            kwargs["position"] = StPosition.RELATIVE
        elif v4_style.position == V4Position.ABSOLUTE:
            kwargs["position"] = StPosition.ABSOLUTE

        # FlexDirectionËΩ¨Êç¢
        if v4_style.flex_direction == FlexDirection.ROW:
            kwargs["flex_direction"] = StFlexDirection.ROW
        elif v4_style.flex_direction == FlexDirection.COLUMN:
            kwargs["flex_direction"] = StFlexDirection.COLUMN
        elif v4_style.flex_direction == FlexDirection.ROW_REVERSE:
            kwargs["flex_direction"] = StFlexDirection.ROW_REVERSE
        elif v4_style.flex_direction == FlexDirection.COLUMN_REVERSE:
            kwargs["flex_direction"] = StFlexDirection.COLUMN_REVERSE

        # AlignItemsËΩ¨Êç¢
        if v4_style.align_items == AlignItems.FLEX_START:
            kwargs["align_items"] = StAlignItems.FLEX_START
        elif v4_style.align_items == AlignItems.CENTER:
            kwargs["align_items"] = StAlignItems.CENTER
        elif v4_style.align_items == AlignItems.FLEX_END:
            kwargs["align_items"] = StAlignItems.FLEX_END
        elif v4_style.align_items == AlignItems.STRETCH:
            kwargs["align_items"] = StAlignItems.STRETCH

        # JustifyContentËΩ¨Êç¢
        if v4_style.justify_content == JustifyContent.FLEX_START:
            kwargs["justify_content"] = StJustifyContent.FLEX_START
        elif v4_style.justify_content == JustifyContent.CENTER:
            kwargs["justify_content"] = StJustifyContent.CENTER
        elif v4_style.justify_content == JustifyContent.FLEX_END:
            kwargs["justify_content"] = StJustifyContent.FLEX_END
        elif v4_style.justify_content == JustifyContent.SPACE_BETWEEN:
            kwargs["justify_content"] = StJustifyContent.SPACE_BETWEEN
        elif v4_style.justify_content == JustifyContent.SPACE_AROUND:
            kwargs["justify_content"] = StJustifyContent.SPACE_AROUND
        elif v4_style.justify_content == JustifyContent.SPACE_EVENLY:
            kwargs["justify_content"] = StJustifyContent.SPACE_EVENLY

        # FlexÂ±ûÊÄß
        if v4_style.flex_grow is not None:
            kwargs["flex_grow"] = v4_style.flex_grow
        if v4_style.flex_shrink is not None:
            kwargs["flex_shrink"] = v4_style.flex_shrink

        # Â∞∫ÂØ∏ËΩ¨Êç¢
        size = V4StyleConverter._convert_size(v4_style.width, v4_style.height)
        if size:
            kwargs["size"] = size

        min_size = V4StyleConverter._convert_size(v4_style.min_width, v4_style.min_height)
        if min_size:
            kwargs["min_size"] = min_size

        max_size = V4StyleConverter._convert_size(v4_style.max_width, v4_style.max_height)
        if max_size:
            kwargs["max_size"] = max_size

        # MarginËΩ¨Êç¢
        margin = V4StyleConverter._convert_rect(
            v4_style.margin_top or v4_style.margin,
            v4_style.margin_right or v4_style.margin,
            v4_style.margin_bottom or v4_style.margin,
            v4_style.margin_left or v4_style.margin,
        )
        if margin:
            kwargs["margin"] = margin

        # PaddingËΩ¨Êç¢
        padding = V4StyleConverter._convert_rect(
            v4_style.padding_top or v4_style.padding,
            v4_style.padding_right or v4_style.padding,
            v4_style.padding_bottom or v4_style.padding,
            v4_style.padding_left or v4_style.padding,
        )
        if padding:
            kwargs["padding"] = padding

        # GapËΩ¨Êç¢
        gap = V4StyleConverter._convert_gap(v4_style.gap, v4_style.row_gap, v4_style.column_gap)
        if gap:
            kwargs["gap"] = gap

        # Inset (positioning)ËΩ¨Êç¢
        inset = V4StyleConverter._convert_rect(
            v4_style.top, v4_style.right, v4_style.bottom, v4_style.left
        )
        if inset:
            kwargs["inset"] = inset

        # GridÂ±ûÊÄßËΩ¨Êç¢ÔºàÂÆåÂÖ®ÊîØÊåÅStretchable GridÔºâ
        if hasattr(v4_style, "grid_template_columns") and v4_style.grid_template_columns:
            grid_columns = V4StyleConverter._convert_grid_template(v4_style.grid_template_columns)
            if grid_columns:
                kwargs["grid_template_columns"] = grid_columns
                logger.debug(f"üéØ GridÊ®°ÊùøÂàó: {v4_style.grid_template_columns} -> {len(grid_columns)}Âàó")

        if hasattr(v4_style, "grid_template_rows") and v4_style.grid_template_rows:
            grid_rows = V4StyleConverter._convert_grid_template(v4_style.grid_template_rows)
            if grid_rows:
                kwargs["grid_template_rows"] = grid_rows
                logger.debug(f"üéØ GridÊ®°ÊùøË°å: {v4_style.grid_template_rows} -> {len(grid_rows)}Ë°å")

        if hasattr(v4_style, "grid_column") and v4_style.grid_column:
            grid_column_placement = V4StyleConverter._convert_grid_placement(v4_style.grid_column)
            if grid_column_placement:
                kwargs["grid_column"] = grid_column_placement
                logger.debug(f"üéØ GridÂàóÂÆö‰Ωç: {v4_style.grid_column}")

        if hasattr(v4_style, "grid_row") and v4_style.grid_row:
            grid_row_placement = V4StyleConverter._convert_grid_placement(v4_style.grid_row)
            if grid_row_placement:
                kwargs["grid_row"] = grid_row_placement
                logger.debug(f"üéØ GridË°åÂÆö‰Ωç: {v4_style.grid_row}")

        if hasattr(v4_style, "grid_area") and v4_style.grid_area:
            # grid_areaÂèØ‰ª•ËÆæÁΩÆgrid_rowÂíågrid_column
            row_placement, column_placement = V4StyleConverter._convert_grid_area(v4_style.grid_area)
            if row_placement:
                kwargs["grid_row"] = row_placement
            if column_placement:
                kwargs["grid_column"] = column_placement
            logger.debug(f"üéØ GridÂå∫Âüü: {v4_style.grid_area}")

        return st.Style(**kwargs)

    @staticmethod
    def _convert_length(v4_length) -> Optional[Length]:
        """ËΩ¨Êç¢v4ÈïøÂ∫¶ÂÄº‰∏∫Stretchable Length"""
        if v4_length is None:
            return None

        # v4 LengthÂØπË±°
        if isinstance(v4_length, V4Length):
            if v4_length.unit == LengthUnit.PX:
                return Length.from_any(float(v4_length.value))
            elif v4_length.unit == LengthUnit.PERCENT:
                return v4_length.value * PCT
            elif v4_length.unit == LengthUnit.AUTO:
                return Length.default()  # StretchableÁöÑautoË°®Á§∫

        # Áõ¥Êé•Êï∞ÂÄº
        if isinstance(v4_length, (int, float)):
            return Length.from_any(float(v4_length))

        # Â≠óÁ¨¶‰∏≤
        if isinstance(v4_length, str):
            if v4_length == "auto":
                return Length.default()
            return Length.from_any(v4_length)

        return None

    @staticmethod
    def _convert_size(width, height) -> Optional[Size]:
        """ËΩ¨Êç¢Â∞∫ÂØ∏"""
        w = V4StyleConverter._convert_length(width)
        h = V4StyleConverter._convert_length(height)

        if w is not None or h is not None:
            return Size(width=w or Length.default(), height=h or Length.default())
        return None

    @staticmethod
    def _convert_rect(top, right, bottom, left) -> Optional[Rect]:
        """ËΩ¨Êç¢Áü©ÂΩ¢ÂÄº"""
        t = V4StyleConverter._convert_length(top)
        r = V4StyleConverter._convert_length(right)
        b = V4StyleConverter._convert_length(bottom)
        l = V4StyleConverter._convert_length(left)

        if any(x is not None for x in [t, r, b, l]):
            return Rect(
                top=t or Length.from_any(0),
                right=r or Length.from_any(0),
                bottom=b or Length.from_any(0),
                left=l or Length.from_any(0),
            )
        return None

    @staticmethod
    def _convert_gap(gap, row_gap, column_gap) -> Optional[Size]:
        """ËΩ¨Êç¢gapÂÄº"""
        if gap is not None:
            gap_length = V4StyleConverter._convert_length(gap)
            if gap_length:
                return Size(width=gap_length, height=gap_length)
        elif row_gap is not None or column_gap is not None:
            col_gap = V4StyleConverter._convert_length(column_gap) or Length.from_any(0)
            row_gap_val = V4StyleConverter._convert_length(row_gap) or Length.from_any(0)
            return Size(width=col_gap, height=row_gap_val)
        return None

    @staticmethod
    def _convert_grid_template(template_value: str):
        """
        ËΩ¨Êç¢CSS GridÊ®°ÊùøÂÄºÂà∞Stretchable GridTrackSizingÂàóË°®
        
        ÊîØÊåÅÁöÑCSS GridËØ≠Ê≥ï:
        - "1fr 2fr 1fr" -> ÂàÜÊï∞Âçï‰Ωç
        - "100px auto 200px" -> Âõ∫ÂÆöÂ∞∫ÂØ∏ÂíåËá™Âä®
        - "repeat(3, 1fr)" -> ÈáçÂ§çÊ®°Âºè
        - "minmax(100px, 1fr)" -> ÊúÄÂ∞èÊúÄÂ§ßÂÄº
        """
        if not template_value or not isinstance(template_value, str):
            return None
            
        try:
            from stretchable.style import GridTrackSizing
            
            # Â§ÑÁêÜÁÆÄÂçïÁöÑÁ©∫Ê†ºÂàÜÈöîÁöÑÂÄº
            if " " in template_value and not template_value.startswith("repeat("):
                tracks = []
                for track_str in template_value.split():
                    track_str = track_str.strip()
                    if track_str:
                        track = GridTrackSizing.from_any(track_str)
                        tracks.append(track)
                return tracks
            else:
                # Âçï‰∏™ÂÄºÊàñÂ§çÊùÇË°®ËææÂºè
                track = GridTrackSizing.from_any(template_value)
                return [track]
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è GridÊ®°ÊùøËΩ¨Êç¢Â§±Ë¥•: {template_value} - {e}")
            return None
    
    @staticmethod
    def _convert_grid_placement(placement_value: str):
        """
        ËΩ¨Êç¢CSS GridÂÆö‰ΩçÂÄºÂà∞Stretchable GridPlacement
        
        ÊîØÊåÅÁöÑCSS GridÂÆö‰ΩçËØ≠Ê≥ï:
        - "1" -> Á¨¨1Ë°å/Âàó
        - "1 / 3" -> ‰ªéÁ¨¨1Ë°å/ÂàóÂà∞Á¨¨3Ë°å/Âàó
        - "span 2" -> Ë∑®Ë∂ä2Ë°å/Âàó
        - "auto" -> Ëá™Âä®ÂÆö‰ΩçÔºàËøîÂõûNoneÔºâ
        """
        if not placement_value or not isinstance(placement_value, str):
            return None
            
        # ÁâπÊÆäÂ§ÑÁêÜautoÊÉÖÂÜµ
        if placement_value.strip().lower() == "auto":
            # autoÊÉÖÂÜµ‰∏ãËøîÂõæNoneÔºåËÆ©StretchableËá™Âä®Â§ÑÁêÜ
            logger.debug("üîç GridËá™Âä®ÂÆö‰ΩçÔºå‰ΩøÁî®ÈªòËÆ§Ë°å‰∏∫")
            return None
            
        try:
            from stretchable.style import GridPlacement
            
            placement = GridPlacement.from_any(placement_value)
            return placement
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è GridÂÆö‰ΩçËΩ¨Êç¢Â§±Ë¥•: {placement_value} - {e}")
            return None
    
    @staticmethod
    def _convert_grid_area(area_value: str):
        """
        ËΩ¨Êç¢CSS GridÂå∫ÂüüÂÄºÂà∞Ë°åÂíåÂàóÁöÑGridPlacement
        
        CSS grid-areaËØ≠Ê≥ï: "row-start / column-start / row-end / column-end"
        ‰æãÂ¶Ç: "1 / 2 / 3 / 4" -> Ë°å 1-3, Âàó 2-4
        """
        if not area_value or not isinstance(area_value, str):
            return None, None
            
        try:
            # Ëß£Êûê "row-start / column-start / row-end / column-end"
            parts = [p.strip() for p in area_value.split("/")]
            
            if len(parts) == 4:
                row_start, col_start, row_end, col_end = parts
                
                # ËΩ¨Êç¢Ë°åÂÆö‰Ωè
                row_placement = V4StyleConverter._convert_grid_placement(f"{row_start} / {row_end}")
                col_placement = V4StyleConverter._convert_grid_placement(f"{col_start} / {col_end}")
                
                return row_placement, col_placement
            
            elif len(parts) == 1:
                # Âçï‰∏™ÂÄºÔºåÂ¶ÇÊûúÊòØÂëΩÂêçÂå∫Âüü
                logger.debug(f"üîç GridÂëΩÂêçÂå∫Âüü: {area_value}ÔºàÊöÇ‰∏çÊîØÊåÅÔºâ")
                return None, None
            else:
                logger.warning(f"‚ö†Ô∏è ‰∏çÊîØÊåÅÁöÑGridÂå∫ÂüüÊ†ºÂºè: {area_value}")
                return None, None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è GridÂå∫ÂüüËΩ¨Êç¢Â§±Ë¥•: {area_value} - {e}")
            return None, None


class LayoutNode:
    """v4Â∏ÉÂ±ÄËäÇÁÇπ - Â∞ÅË£ÖStretchable Node"""

    def __init__(
        self, component, style: Optional[ComponentStyle] = None, key: Optional[str] = None
    ):
        """ÂàùÂßãÂåñÂ∏ÉÂ±ÄËäÇÁÇπ

        Args:
            component: v4ÁªÑ‰ª∂ÂºïÁî®
            style: ÁªÑ‰ª∂Ê†∑Âºè
            key: ËäÇÁÇπÊ†áËØÜÁ¨¶
        """
        self.component = component
        self.key = key or f"node_{id(component)}"
        self.children: List["LayoutNode"] = []
        self.parent: Optional["LayoutNode"] = None

        # ËΩ¨Êç¢Ê†∑ÂºèÂπ∂ÂàõÂª∫StretchableËäÇÁÇπ
        if style:
            stretchable_style = V4StyleConverter.convert_to_stretchable_style(style)
        else:
            stretchable_style = st.Style()

        self._stretchable_node = st.Node(style=stretchable_style)

        logger.debug(f"üìê ÂàõÂª∫Â∏ÉÂ±ÄËäÇÁÇπ: {self.key} -> {component.__class__.__name__}")

    def add_child(self, child_node: "LayoutNode", index: Optional[int] = None):
        """Ê∑ªÂä†Â≠êËäÇÁÇπ - v3È£éÊ†ºÁõ¥Êé•Êìç‰Ωú"""
        # Á°Æ‰øùÂ≠êËäÇÁÇπ‰ªéÂéüÁà∂ËäÇÁÇπÂÆåÂÖ®ÁßªÈô§
        if child_node.parent:
            child_node.parent.remove_child(child_node)

        # Á°Æ‰øùStretchableËäÇÁÇπÁöÑparentÂ±ûÊÄß‰πüÊ∏ÖÁ©∫
        if hasattr(child_node._stretchable_node, "parent") and child_node._stretchable_node.parent:
            logger.debug(f"üîç Ê∏ÖÁêÜStretchableËäÇÁÇπÁöÑparentÂºïÁî®: {child_node.key}")
            child_node._stretchable_node.parent = None

        child_node.parent = self

        try:
            # ÁÆÄÂåñÁâàÊú¨Ôºöv4ÊÄªÊòØ‰ΩøÁî®appendÔºåÂøΩÁï•indexÂèÇÊï∞
            # ËøôÊ†∑ÂèØ‰ª•Á°Æ‰øù‰∏év3ÁöÑÂÖºÂÆπÊÄß
            self.children.append(child_node)
            # v3È£éÊ†ºÔºöÁõ¥Êé•Âú®StretchableËäÇÁÇπ‰∏äÊìç‰Ωú
            self._stretchable_node.append(child_node._stretchable_node)
            logger.debug(f"üîç Stretchable append ÊâßË°åÂÆåÊàê")

            # È™åËØÅÊ∑ªÂä†ÁªìÊûúÔºà‰ΩøÁî®Python listÊé•Âè£Ôºâ
            actual_children = len(self._stretchable_node)
            expected_children = len(self.children)

            if actual_children != expected_children:
                logger.error(f"‚ùå Â≠êËäÇÁÇπÊ∑ªÂä†‰∏ç‰∏ÄËá¥: ÊúüÊúõ{expected_children}, ÂÆûÈôÖ{actual_children}")
                logger.debug(f"üîç Stretchable Python list: {list(self._stretchable_node)}")
                return False

            logger.debug(
                f"‚ûï Â∏ÉÂ±ÄËäÇÁÇπÊ∑ªÂä†Â≠êËäÇÁÇπÊàêÂäü: {self.key} -> {child_node.key} (Â≠êËäÇÁÇπÊï∞: {actual_children})"
            )
            return True

        except Exception as e:
            logger.error(f"‚ùå Ê∑ªÂä†Â≠êËäÇÁÇπÂºÇÂ∏∏: {self.key} -> {child_node.key} - {e}")
            import traceback

            logger.error(f"‚ùå ËØ¶ÁªÜÂºÇÂ∏∏: {traceback.format_exc()}")
            return False

    def remove_child(self, child_node: "LayoutNode"):
        """
        ÂÆâÂÖ®ÁßªÈô§Â≠êËäÇÁÇπ - Èò≤Ê≠¢TaffyÂ∫ìÂ¥©Ê∫É

        Ëøô‰∏™ÊñπÊ≥ïÂÆûÁé∞‰∫ÜÂÆâÂÖ®ÁöÑËäÇÁÇπÁßªÈô§Á≠ñÁï•ÔºåËß£ÂÜ≥‰∫ÜÂä®ÊÄÅÂÜÖÂÆπÂàáÊç¢Êó∂
        Rust TaffyÂ∫ìÂá∫Áé∞ÁöÑ 'Option::unwrap() on a None value' Â¥©Ê∫ÉÈóÆÈ¢ò„ÄÇ

        ÂÖ≥ÈîÆÂÆâÂÖ®Êé™ÊñΩÔºö
        1. ÂÖà‰ªéPythonÂ±ÇÁßªÈô§ËäÇÁÇπÂºïÁî®
        2. Ê£ÄÊü•StretchableËäÇÁÇπÊòØÂê¶‰ªçÂ≠òÂú®‰∫éÁà∂ËäÇÁÇπ‰∏≠
        3. ÂÖàÊ∏ÖÁ©∫Áà∂ÂºïÁî®ÔºåÂÜçÊâßË°åÁßªÈô§Êìç‰Ωú
        4. ÂÖ®Á®ãÂºÇÂ∏∏‰øùÊä§ÔºåÁ°Æ‰øù‰∏çÂΩ±ÂìçÂ∫îÁî®ËøêË°å
        """
        if child_node not in self.children:
            logger.debug(f"‚ö†Ô∏è Â≠êËäÇÁÇπ‰∏çÂú®Áà∂ËäÇÁÇπÂàóË°®‰∏≠: {child_node.key}")
            return

        # Á¨¨‰∏ÄÊ≠•Ôºö‰ªéPythonÂ±ÇÁßªÈô§ËäÇÁÇπÂºïÁî®
        self.children.remove(child_node)

        # Á¨¨‰∫åÊ≠•ÔºöÂÆâÂÖ®ÁßªÈô§Â∫ïÂ±ÇStretchableËäÇÁÇπ
        self._safe_remove_stretchable_child(child_node)

        # Á¨¨‰∏âÊ≠•ÔºöÊ∏ÖÁêÜËäÇÁÇπÈó¥ÁöÑÂºïÁî®ÂÖ≥Á≥ª
        child_node.parent = None

        logger.debug(f"‚úÖ ÂÆâÂÖ®ÁßªÈô§Â≠êËäÇÁÇπÂÆåÊàê: {self.key} <- {child_node.key}")

    def _safe_remove_stretchable_child(self, child_node: "LayoutNode"):
        """
        ÂÆâÂÖ®ÁßªÈô§StretchableÂ≠êËäÇÁÇπÁöÑÂÜÖÈÉ®ÊñπÊ≥ï

        ËøôÊòØËß£ÂÜ≥TaffyÂ¥©Ê∫ÉÈóÆÈ¢òÁöÑÊ†∏ÂøÉÊñπÊ≥ïÔºåÈÄöËøáÂ§öÈáçÊ£ÄÊü•Âíå
        ÂºÇÂ∏∏‰øùÊä§Á°Æ‰øùÂ∫ïÂ±ÇRustËäÇÁÇπÁöÑÂÆâÂÖ®ÁßªÈô§„ÄÇ
        """
        try:
            stretchable_child = child_node._stretchable_node
            if not stretchable_child:
                logger.debug("‚ö†Ô∏è Â≠êËäÇÁÇπÁöÑStretchableËäÇÁÇπ‰∏∫Á©∫ÔºåË∑≥ËøáÁßªÈô§")
                return

            # ÂÖ≥ÈîÆÊ£ÄÊü•ÔºöÁ°Æ‰øùËäÇÁÇπÁ°ÆÂÆûÂ≠òÂú®‰∫éÁà∂ËäÇÁÇπ‰∏≠
            if stretchable_child in self._stretchable_node:
                # Ê≠•È™§1ÔºöÂÖàÊñ≠ÂºÄÁà∂ÂºïÁî®ÔºåÈò≤Ê≠¢Âæ™ÁéØÂºïÁî®ÂØºËá¥ÁöÑÈóÆÈ¢ò
                if hasattr(stretchable_child, "parent"):
                    stretchable_child.parent = None

                # Ê≠•È™§2Ôºö‰ªéÁà∂ËäÇÁÇπÁöÑÂ≠êÂàóË°®‰∏≠ÁßªÈô§
                self._stretchable_node.remove(stretchable_child)
                logger.debug("üîó StretchableÂ≠êËäÇÁÇπÂÆâÂÖ®ÁßªÈô§ÊàêÂäü")
            else:
                logger.debug("‚ö†Ô∏è StretchableÂ≠êËäÇÁÇπÂ∑≤‰∏çÂú®Áà∂ËäÇÁÇπ‰∏≠ÔºåË∑≥ËøáÁßªÈô§")

        except Exception as e:
            # Âç≥‰ΩøÁßªÈô§Â§±Ë¥•‰πü‰∏çÂ∫îËØ•ÂΩ±ÂìçÂ∫îÁî®ËøêË°å
            logger.warning(f"‚ö†Ô∏è StretchableËäÇÁÇπÁßªÈô§ÂºÇÂ∏∏ÔºàÂ∫îÁî®ÁªßÁª≠ËøêË°åÔºâ: {e}")
            # Âú®Ë∞ÉËØïÊ®°Âºè‰∏ãÂèØ‰ª•ÊòæÁ§∫Êõ¥ËØ¶ÁªÜÁöÑÈîôËØØ‰ø°ÊÅØ
            if logger.isEnabledFor(10):  # DEBUG level
                import traceback

                logger.debug(f"ËØ¶ÁªÜÂºÇÂ∏∏‰ø°ÊÅØ: {traceback.format_exc()}")

    def update_style(self, style: ComponentStyle):
        """Êõ¥Êñ∞ËäÇÁÇπÊ†∑Âºè"""
        stretchable_style = V4StyleConverter.convert_to_stretchable_style(style)
        self._stretchable_node.style = stretchable_style
        self.mark_dirty()

    def compute_layout(self, available_size: Optional[Tuple[float, float]] = None) -> bool:
        """ËÆ°ÁÆóÂ∏ÉÂ±Ä"""
        try:
            # StretchableÂèØ‰ª•Áõ¥Êé•Êé•Âèótuple‰Ωú‰∏∫available_spaceÂèÇÊï∞
            result = self._stretchable_node.compute_layout(available_size)
            if not result:
                logger.warning(f"‚ö†Ô∏è StretchableÂ∏ÉÂ±ÄËÆ°ÁÆóËøîÂõûFalse: {self.key}")
            return result
        except Exception as e:
            logger.error(f"‚ùå Â∏ÉÂ±ÄËÆ°ÁÆóÂºÇÂ∏∏: {self.key} - {e}")
            import traceback

            logger.error(f"‚ùå ËØ¶ÁªÜÈîôËØØ: {traceback.format_exc()}")
            return False

    def get_layout(self) -> Tuple[float, float, float, float]:
        """Ëé∑ÂèñËÆ°ÁÆóÂêéÁöÑÂ∏ÉÂ±ÄÁªìÊûú"""
        box = self._stretchable_node.get_box()
        return (box.x, box.y, box.width, box.height)

    def get_content_size(self) -> Tuple[float, float]:
        """Ëé∑ÂèñÂÜÖÂÆπÂå∫ÂüüÂ∞∫ÂØ∏"""
        border_box = self._stretchable_node.border_box
        return (border_box.width, border_box.height)

    def mark_dirty(self):
        """Ê†áËÆ∞ÈúÄË¶ÅÈáçÊñ∞Â∏ÉÂ±Ä"""
        self._stretchable_node.mark_dirty()

    def is_dirty(self) -> bool:
        """Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÈáçÊñ∞Â∏ÉÂ±Ä"""
        return self._stretchable_node.is_dirty


class V4LayoutEngine:
    """v4Â∏ÉÂ±ÄÂºïÊìé - ÂÆåÂÖ®Áã¨Á´ãÁöÑÂÆûÁé∞"""

    def __init__(self, enable_cache: bool = True, debug_mode: bool = False):
        self.enable_cache = enable_cache
        self.debug_mode = debug_mode

        # ÁªÑ‰ª∂Âà∞Â∏ÉÂ±ÄËäÇÁÇπÁöÑÊò†Â∞Ñ
        self._component_nodes: Dict[Any, LayoutNode] = {}

        # ÊÄßËÉΩÁªüËÆ°
        self._layout_calls = 0
        self._cache_hits = 0
        self._cache_misses = 0

        logger.debug("üèóÔ∏è V4LayoutEngineÂàùÂßãÂåñÂÆåÊàê")

    def create_node_for_component(self, component) -> LayoutNode:
        """‰∏∫ÁªÑ‰ª∂ÂàõÂª∫Â∏ÉÂ±ÄËäÇÁÇπ"""
        if component in self._component_nodes:
            existing_node = self._component_nodes[component]
            logger.debug(f"üìê ‰ΩøÁî®Â∑≤Â≠òÂú®ÁöÑÂ∏ÉÂ±ÄËäÇÁÇπ: {component.__class__.__name__}")
            return existing_node

        style = getattr(component, "style", None)
        node = LayoutNode(component, style)
        self._component_nodes[component] = node

        logger.debug(f"üìê ‰∏∫ÁªÑ‰ª∂ÂàõÂª∫Â∏ÉÂ±ÄËäÇÁÇπ: {component.__class__.__name__}")
        return node

    def get_node_for_component(self, component) -> Optional[LayoutNode]:
        """Ëé∑ÂèñÁªÑ‰ª∂ÁöÑÂ∏ÉÂ±ÄËäÇÁÇπ"""
        return self._component_nodes.get(component)

    def add_child_relationship(
        self, parent_component, child_component, index: Optional[int] = None
    ):
        """Âª∫Á´ãÁà∂Â≠êÂ∏ÉÂ±ÄÂÖ≥Á≥ª"""
        parent_node = self.get_node_for_component(parent_component)
        if not parent_node:
            parent_node = self.create_node_for_component(parent_component)

        child_node = self.get_node_for_component(child_component)
        if not child_node:
            child_node = self.create_node_for_component(child_component)

        parent_node.add_child(child_node, index)

    def remove_child_relationship(self, parent_component, child_component):
        """
        ÂÆâÂÖ®ÁßªÈô§Áà∂Â≠êÂ∏ÉÂ±ÄÂÖ≥Á≥ª

        Ëøô‰∏™ÊñπÊ≥ïÊòØÂä®ÊÄÅÂÜÖÂÆπÂàáÊç¢ÁöÑÊ†∏ÂøÉÔºåË¥üË¥£ÂÆâÂÖ®Âú∞Êñ≠ÂºÄ
        Áà∂Â≠êÁªÑ‰ª∂Èó¥ÁöÑÂ∏ÉÂ±ÄÂÖ≥Á≥ªÔºåÈò≤Ê≠¢TaffyÂ∫ìÂ¥©Ê∫É„ÄÇ

        Â§ÑÁêÜÊµÅÁ®ãÔºö
        1. ‰ªéÁà∂ËäÇÁÇπÁßªÈô§Â≠êËäÇÁÇπ
        2. Ê∑±Â∫¶Ê∏ÖÁêÜÂ≠êËäÇÁÇπÂèäÂÖ∂Âêé‰ª£
        3. Ê∏ÖÁêÜÁªÑ‰ª∂Êò†Â∞ÑÂÖ≥Á≥ª
        4. Êèê‰æõÂ§öÂ±ÇÊ¨°ÁöÑÈîôËØØÊÅ¢Â§çÊú∫Âà∂
        """
        if not parent_component or not child_component:
            logger.debug("‚ö†Ô∏è Áà∂ÁªÑ‰ª∂ÊàñÂ≠êÁªÑ‰ª∂‰∏∫Á©∫ÔºåË∑≥ËøáÂÖ≥Á≥ªÁßªÈô§")
            return

        parent_node = self.get_node_for_component(parent_component)
        child_node = self.get_node_for_component(child_component)

        # Á¨¨‰∏ÄÊ≠•Ôºö‰ªéÁà∂ËäÇÁÇπÁßªÈô§Â≠êËäÇÁÇπ
        if parent_node and child_node:
            self._remove_from_parent_node(parent_node, child_node, child_component)
        else:
            logger.debug(
                f"‚ö†Ô∏è Êâæ‰∏çÂà∞Â∏ÉÂ±ÄËäÇÁÇπ: parent={parent_node is not None}, child={child_node is not None}"
            )

        # Á¨¨‰∫åÊ≠•ÔºöÊ∏ÖÁêÜÂ≠êÁªÑ‰ª∂ÁöÑÂ∏ÉÂ±ÄÊò†Â∞ÑÂíåËµÑÊ∫ê
        if child_node and child_component in self._component_nodes:
            self._cleanup_child_component_mapping(child_node, child_component)
        else:
            logger.debug(f"‚ö†Ô∏è Â≠êÁªÑ‰ª∂‰∏çÂú®Êò†Â∞Ñ‰∏≠ÊàñËäÇÁÇπÊó†Êïà: {child_component.__class__.__name__}")

    def _remove_from_parent_node(self, parent_node, child_node, child_component):
        """‰ªéÁà∂ËäÇÁÇπÂÆâÂÖ®ÁßªÈô§Â≠êËäÇÁÇπ"""
        try:
            # ‰ΩøÁî®Êàë‰ª¨ÊîπËøõÁöÑÂÆâÂÖ®ÁßªÈô§ÊñπÊ≥ï
            parent_node.remove_child(child_node)
            logger.debug(f"‚úÖ Â∏ÉÂ±ÄÂÖ≥Á≥ªÁßªÈô§ÊàêÂäü: {child_component.__class__.__name__}")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ê†áÂáÜÁßªÈô§ÊñπÊ≥ïÂ§±Ë¥•ÔºåÂ∞ùËØïÂº∫Âà∂Ê∏ÖÁêÜ: {e}")

            # Âº∫Âà∂Ê∏ÖÁêÜ‰Ωú‰∏∫Â§áÁî®ÊñπÊ°à
            try:
                self._force_remove_child_relationship(parent_node, child_node)
                logger.debug("üîß Âº∫Âà∂Ê∏ÖÁêÜÂ∏ÉÂ±ÄÂÖ≥Á≥ªÊàêÂäü")
            except Exception as force_e:
                logger.warning(f"‚ö†Ô∏è Âº∫Âà∂Ê∏ÖÁêÜ‰πüÂ§±Ë¥•: {force_e}")
                # Âç≥‰ΩøÂº∫Âà∂Ê∏ÖÁêÜÂ§±Ë¥•Ôºå‰πü‰∏çÂ∫îËØ•‰∏≠Êñ≠Â∫îÁî®ËøêË°å

    def _force_remove_child_relationship(self, parent_node, child_node):
        """Âº∫Âà∂Ê∏ÖÁêÜÁà∂Â≠êÂÖ≥Á≥ª - ÊúÄÂêéÁöÑ‰øùÈô©Êé™ÊñΩ"""
        # ‰ªéPythonÂ±ÇÂº∫Âà∂ÁßªÈô§ÂºïÁî®
        if child_node in parent_node.children:
            parent_node.children.remove(child_node)

        # Êñ≠ÂºÄÂ≠êËäÇÁÇπÁöÑÁà∂ÂºïÁî®
        child_node.parent = None

        # Â∞ùËØï‰ªéStretchableÂ±Ç‰πüÁßªÈô§ÔºàÂ¶ÇÊûúÂèØËÉΩÔºâ
        try:
            stretchable_child = child_node._stretchable_node
            if stretchable_child and hasattr(stretchable_child, "parent"):
                stretchable_child.parent = None
        except:
            pass  # Â¶ÇÊûúStretchableÂ±ÇÂ∑≤ÊçüÂùèÔºåÂøΩÁï•ÈîôËØØ

    def _cleanup_child_component_mapping(self, child_node, child_component):
        """Ê∏ÖÁêÜÂ≠êÁªÑ‰ª∂ÁöÑÊò†Â∞ÑÂíåËµÑÊ∫ê"""
        try:
            # Ê∑±Â∫¶Ê∏ÖÁêÜÂ≠êËäÇÁÇπÂèäÂÖ∂Âêé‰ª£
            self._deep_cleanup_node(child_node)

            # ‰ªéÊò†Â∞Ñ‰∏≠ÁßªÈô§
            del self._component_nodes[child_component]

            logger.debug(f"üßπ Â≠êÁªÑ‰ª∂Ê∏ÖÁêÜÂÆåÊàê: {child_component.__class__.__name__}")

        except Exception as cleanup_e:
            logger.warning(f"‚ö†Ô∏è Â≠êÁªÑ‰ª∂Ê∏ÖÁêÜÂºÇÂ∏∏: {cleanup_e}")

            # Ëá≥Â∞ëÁ°Æ‰øùÊò†Â∞ÑË¢´Ê∏ÖÁêÜ
            self._ensure_mapping_cleanup(child_component)

    def _ensure_mapping_cleanup(self, child_component):
        """Á°Æ‰øùÁªÑ‰ª∂Êò†Â∞ÑË¢´Ê∏ÖÁêÜ - ÊúÄÂêé‰øùÈöú"""
        try:
            if child_component in self._component_nodes:
                del self._component_nodes[child_component]
                logger.debug("üîß ÁªÑ‰ª∂Êò†Â∞ÑÂº∫Âà∂Ê∏ÖÁêÜÊàêÂäü")
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Êò†Â∞ÑÊ∏ÖÁêÜ‰πüÂ§±Ë¥•: {e}")
            # Âç≥‰ΩøÊò†Â∞ÑÊ∏ÖÁêÜÂ§±Ë¥•Ôºå‰πü‰∏çÂΩ±ÂìçÂ∫îÁî®ËøêË°å

    def _deep_cleanup_node(self, node):
        """
        Ê∑±Â∫¶Ê∏ÖÁêÜÂ∏ÉÂ±ÄËäÇÁÇπ - ÈÄíÂΩíÊ∏ÖÁêÜÈò≤Ê≠¢ÂÜÖÂ≠òÊ≥ÑÊºè

        Ëøô‰∏™ÊñπÊ≥ïË¥üË¥£ÂΩªÂ∫ïÊ∏ÖÁêÜÂ∏ÉÂ±ÄËäÇÁÇπÂèäÂÖ∂ÊâÄÊúâÂ≠êËäÇÁÇπÔºå
        Á°Æ‰øùÂú®Âä®ÊÄÅÂÜÖÂÆπÂàáÊç¢Êó∂‰∏ç‰ºö‰∫ßÁîüÊÇ¨Á©∫ÂºïÁî®ÊàñÂÜÖÂ≠òÊ≥ÑÊºè„ÄÇ

        Ê∏ÖÁêÜÈ°∫Â∫èÔºö
        1. Ê∏ÖÁêÜÊâÄÊúâÂ≠êËäÇÁÇπÔºàËá™‰∏ãËÄå‰∏äÔºâ
        2. Ê∏ÖÁêÜÁà∂ÂºïÁî®ÔºàÊñ≠ÂºÄÂêë‰∏äÈìæÊé•Ôºâ
        3. ÈáçÁΩÆÂ∏ÉÂ±ÄÁä∂ÊÄÅÔºàÊ∏ÖÁêÜÁºìÂ≠òÔºâ
        """
        if not node or not hasattr(node, "_stretchable_node"):
            logger.debug("‚ö†Ô∏è ËäÇÁÇπÊó†ÊïàÊàñÁº∫Â∞ëStretchableËäÇÁÇπÔºåË∑≥ËøáÊ∑±Â∫¶Ê∏ÖÁêÜ")
            return

        try:
            stretchable_node = node._stretchable_node
            if not stretchable_node:
                logger.debug("‚ö†Ô∏è StretchableËäÇÁÇπ‰∏∫Á©∫ÔºåË∑≥ËøáÊ∏ÖÁêÜ")
                return

            # Á¨¨‰∏ÄÈò∂ÊÆµÔºöÊ∏ÖÁêÜÊâÄÊúâÂ≠êËäÇÁÇπ
            self._cleanup_child_nodes(stretchable_node)

            # Á¨¨‰∫åÈò∂ÊÆµÔºöÊ∏ÖÁêÜÁà∂ÂºïÁî®ÂÖ≥Á≥ª
            self._cleanup_parent_reference(stretchable_node)

            # Á¨¨‰∏âÈò∂ÊÆµÔºöÈáçÁΩÆÂ∏ÉÂ±ÄÁä∂ÊÄÅ
            self._reset_node_layout_state(stretchable_node)

            logger.debug("‚úÖ Ê∑±Â∫¶Ê∏ÖÁêÜËäÇÁÇπÂÆåÊàê")

        except Exception as e:
            # Ê∑±Â∫¶Ê∏ÖÁêÜÂ§±Ë¥•‰∏çÂ∫îËØ•ÂΩ±ÂìçÂ∫îÁî®ËøêË°å
            logger.debug(f"‚ö†Ô∏è Ê∑±Â∫¶Ê∏ÖÁêÜËøáÁ®ãÂºÇÂ∏∏ÔºàÂ∫îÁî®ÁªßÁª≠ËøêË°åÔºâ: {e}")
            if logger.isEnabledFor(10):  # DEBUG level
                import traceback

                logger.debug(f"Ê∑±Â∫¶Ê∏ÖÁêÜÂºÇÂ∏∏ËØ¶ÊÉÖ: {traceback.format_exc()}")

    def _cleanup_child_nodes(self, stretchable_node):
        """Ê∏ÖÁêÜÊâÄÊúâÂ≠êËäÇÁÇπÁöÑÂÜÖÈÉ®ÊñπÊ≥ï"""
        try:
            # ÂàõÂª∫Â≠êËäÇÁÇπÂàóË°®ÁöÑÂâØÊú¨ÔºåÈÅøÂÖçËø≠‰ª£Êó∂‰øÆÊîπÂéüÂàóË°®
            children = list(stretchable_node) if stretchable_node else []

            if children:
                logger.debug(f"üßπ ÂºÄÂßãÊ∏ÖÁêÜ {len(children)} ‰∏™Â≠êËäÇÁÇπ")

                for i, child in enumerate(children):
                    try:
                        self._cleanup_single_child(stretchable_node, child, i)
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è Ê∏ÖÁêÜÁ¨¨ {i} ‰∏™Â≠êËäÇÁÇπÂºÇÂ∏∏: {e}")
            else:
                logger.debug("‚ÑπÔ∏è Êó†Â≠êËäÇÁÇπÈúÄË¶ÅÊ∏ÖÁêÜ")

        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Ëé∑ÂèñÂ≠êËäÇÁÇπÂàóË°®ÂºÇÂ∏∏: {e}")

    def _cleanup_single_child(self, parent_node, child_node, index):
        """Ê∏ÖÁêÜÂçï‰∏™Â≠êËäÇÁÇπ"""
        try:
            # Ê£ÄÊü•Â≠êËäÇÁÇπÊòØÂê¶‰ªçÂú®Áà∂ËäÇÁÇπ‰∏≠
            if child_node in parent_node:
                # ÂÖàÊñ≠ÂºÄÁà∂ÂºïÁî®
                if hasattr(child_node, "parent"):
                    child_node.parent = None

                # ‰ªéÁà∂ËäÇÁÇπÁßªÈô§
                parent_node.remove(child_node)
                logger.debug(f"üóëÔ∏è Â≠êËäÇÁÇπ [{index}] Ê∏ÖÁêÜÊàêÂäü")
            else:
                logger.debug(f"‚ö†Ô∏è Â≠êËäÇÁÇπ [{index}] Â∑≤‰∏çÂú®Áà∂ËäÇÁÇπ‰∏≠")

        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Â≠êËäÇÁÇπ [{index}] Ê∏ÖÁêÜÂºÇÂ∏∏: {e}")

    def _cleanup_parent_reference(self, stretchable_node):
        """Ê∏ÖÁêÜÁà∂ÂºïÁî®ÂÖ≥Á≥ª"""
        try:
            if not hasattr(stretchable_node, "parent"):
                logger.debug("‚ÑπÔ∏è ËäÇÁÇπÊó†Áà∂ÂºïÁî®ÔºåË∑≥ËøáÁà∂ÂºïÁî®Ê∏ÖÁêÜ")
                return

            parent = stretchable_node.parent
            if parent:
                # Ê£ÄÊü•Âπ∂‰ªéÁà∂ËäÇÁÇπ‰∏≠ÁßªÈô§Ëá™Â∑±
                if stretchable_node in parent:
                    parent.remove(stretchable_node)
                    logger.debug("üîó ‰ªéÁà∂ËäÇÁÇπÁßªÈô§ÊàêÂäü")

                # Êñ≠ÂºÄÁà∂ÂºïÁî®
                stretchable_node.parent = None
                logger.debug("üßπ Áà∂ÂºïÁî®Ê∏ÖÁêÜÊàêÂäü")
            else:
                logger.debug("‚ÑπÔ∏è Êó†Áà∂ËäÇÁÇπÔºåË∑≥ËøáÁà∂ÂºïÁî®Ê∏ÖÁêÜ")

        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Áà∂ÂºïÁî®Ê∏ÖÁêÜÂºÇÂ∏∏: {e}")

    def _reset_node_layout_state(self, stretchable_node):
        """ÈáçÁΩÆËäÇÁÇπÁöÑÂ∏ÉÂ±ÄÁä∂ÊÄÅ"""
        try:
            self._reset_layout_state(stretchable_node)
            logger.debug("üîÑ Â∏ÉÂ±ÄÁä∂ÊÄÅÈáçÁΩÆÂÆåÊàê")
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Â∏ÉÂ±ÄÁä∂ÊÄÅÈáçÁΩÆÂºÇÂ∏∏: {e}")

    def compute_layout_for_component(
        self, component, available_size: Optional[Tuple[float, float]] = None
    ) -> Optional[LayoutResult]:
        """ËÆ°ÁÆóÁªÑ‰ª∂Â∏ÉÂ±Ä - v3È£éÊ†ºÁõ¥Êé•ÊñπÂºè"""
        start_time = time.perf_counter()
        self._layout_calls += 1

        node = self.get_node_for_component(component)
        if not node:
            logger.warning(f"‚ö†Ô∏è ÁªÑ‰ª∂ {component.__class__.__name__} Ê≤°ÊúâÂ∏ÉÂ±ÄËäÇÁÇπ")
            return None

        # v3È£éÊ†ºÔºöÁõ¥Êé•Âú®ÂéüÂßãStretchableËäÇÁÇπ‰∏äËÆ°ÁÆóÂ∏ÉÂ±Ä
        stretchable_node = node._stretchable_node
        logger.debug(f"üîç Áõ¥Êé•Â∏ÉÂ±ÄËÆ°ÁÆóÔºåÂ≠êËäÇÁÇπÊï∞: {len(stretchable_node)} (Python listÊé•Âè£)")

        # ÊâßË°åÂ∏ÉÂ±ÄËÆ°ÁÆó
        try:
            # ÂÖ≥ÈîÆ‰øÆÂ§çÔºöÂú®Â∏ÉÂ±ÄËÆ°ÁÆóÂâçÈáçÁΩÆÂ∏ÉÂ±ÄÁä∂ÊÄÅÔºåÈÅøÂÖçÈÄíÂΩíÂèØËßÅÊÄßÊ£ÄÊü•ÈîôËØØ
            self._reset_layout_state(stretchable_node)

            success = stretchable_node.compute_layout(available_size)
            if not success:
                logger.warning(f"‚ö†Ô∏è ÁªÑ‰ª∂Â∏ÉÂ±ÄËÆ°ÁÆóÂ§±Ë¥•: {component.__class__.__name__}")
                return None
        except Exception as e:
            # ÁâπÊÆäÂ§ÑÁêÜStretchableÁöÑLayoutNotComputedError
            if "LayoutNotComputedError" in str(type(e)) or "layout is not computed" in str(e):
                logger.warning(f"üîÑ Â∏ÉÂ±ÄÁä∂ÊÄÅÂºÇÂ∏∏ÔºåÂ∞ùËØïÈáçÂª∫Â∏ÉÂ±ÄÊ†ë: {component.__class__.__name__}")
                try:
                    # Âº∫Âà∂ÈáçÂª∫Â∏ÉÂ±ÄÊ†ë
                    self._rebuild_layout_tree(component, node)
                    success = stretchable_node.compute_layout(available_size)
                    if not success:
                        logger.error(f"‚ùå ÈáçÂª∫ÂêéÂ∏ÉÂ±ÄËÆ°ÁÆó‰ªçÂ§±Ë¥•: {component.__class__.__name__}")
                        return None
                except Exception as rebuild_e:
                    logger.error(f"‚ùå ÈáçÂª∫Â∏ÉÂ±ÄÊ†ëÂ§±Ë¥•: {component.__class__.__name__} - {rebuild_e}")
                    return None
            else:
                logger.error(f"‚ùå Â∏ÉÂ±ÄËÆ°ÁÆóÂºÇÂ∏∏: {component.__class__.__name__} - {e}")
                import traceback

                logger.error(f"‚ùå ËØ¶ÁªÜÈîôËØØ: {traceback.format_exc()}")
                return None

        # Ëé∑ÂèñÁªìÊûú
        box = stretchable_node.get_box()
        x, y, width, height = box.x, box.y, box.width, box.height
        content_width, content_height = width, height

        compute_time = (time.perf_counter() - start_time) * 1000

        result = LayoutResult(
            x=x,
            y=y,
            width=width,
            height=height,
            content_width=content_width,
            content_height=content_height,
            compute_time=compute_time,
        )

        if self.debug_mode:
            logger.debug(
                f"‚úÖ Â∏ÉÂ±ÄËÆ°ÁÆóÂÆåÊàê: {component.__class__.__name__} -> {width:.1f}x{height:.1f} @ ({x:.1f}, {y:.1f}) [{compute_time:.2f}ms]"
            )

        return result

    def _reset_layout_state(self, stretchable_node):
        """ÈáçÁΩÆÂ∏ÉÂ±ÄÁä∂ÊÄÅÔºåËß£ÂÜ≥ÂèØËßÅÊÄßÊ£ÄÊü•Âæ™ÁéØÈóÆÈ¢ò"""
        try:
            # ÈáçÁΩÆ‰ªª‰ΩïÂèØËÉΩÁöÑÂ∏ÉÂ±ÄÁä∂ÊÄÅÁºìÂ≠ò
            if hasattr(stretchable_node, "_layout_computed"):
                stretchable_node._layout_computed = False
            if hasattr(stretchable_node, "_layout"):
                stretchable_node._layout = None
            if hasattr(stretchable_node, "_box"):
                stretchable_node._box = None

            # ÈÄíÂΩíÈáçÁΩÆÂ≠êËäÇÁÇπ
            for child in stretchable_node:
                self._reset_layout_state(child)

        except Exception as e:
            logger.debug(f"‚ö†Ô∏è ÈáçÁΩÆÂ∏ÉÂ±ÄÁä∂ÊÄÅÊó∂Âá∫Áé∞ÂºÇÂ∏∏ÔºàÂèØÂøΩÁï•Ôºâ: {e}")

    def _rebuild_layout_tree(self, component, node):
        """ÈáçÂª∫Â∏ÉÂ±ÄÊ†ëÔºåËß£ÂÜ≥Áà∂Â≠êÂÖ≥Á≥ªÊ∑∑‰π±ÈóÆÈ¢ò"""
        try:
            stretchable_node = node._stretchable_node

            # Ê∏ÖÁêÜÂΩìÂâçËäÇÁÇπÁöÑÁà∂ÂºïÁî®
            if hasattr(stretchable_node, "parent"):
                stretchable_node.parent = None

            # Ê∏ÖÁêÜÊâÄÊúâÂ≠êËäÇÁÇπÁöÑÁà∂ÂºïÁî®
            children = list(stretchable_node)  # Â§çÂà∂Â≠êËäÇÁÇπÂàóË°®
            for child in children:
                if hasattr(child, "parent"):
                    child.parent = None
                # ‰ªéÁà∂ËäÇÁÇπÁßªÈô§
                try:
                    stretchable_node.remove(child)
                except:
                    pass

            # ÈáçÊñ∞Âª∫Á´ãÂπ≤ÂáÄÁöÑÁà∂Â≠êÂÖ≥Á≥ª
            if hasattr(component, "children"):
                for child_component in component.children:
                    child_node = self.get_node_for_component(child_component)
                    if child_node:
                        child_stretchable = child_node._stretchable_node
                        # Á°Æ‰øùÂ≠êËäÇÁÇπÊ≤°ÊúâÁà∂ÂºïÁî®
                        if hasattr(child_stretchable, "parent"):
                            child_stretchable.parent = None
                        # ÈáçÊñ∞Ê∑ªÂä†
                        try:
                            stretchable_node.append(child_stretchable)
                        except Exception as append_e:
                            logger.debug(f"‚ö†Ô∏è ÈáçÂª∫Êó∂Ê∑ªÂä†Â≠êËäÇÁÇπÂ§±Ë¥•ÔºàÂèØÂøΩÁï•Ôºâ: {append_e}")

            # ÈáçÁΩÆÂ∏ÉÂ±ÄÁä∂ÊÄÅ
            self._reset_layout_state(stretchable_node)

            logger.debug(f"üîÑ Â∏ÉÂ±ÄÊ†ëÈáçÂª∫ÂÆåÊàê: {component.__class__.__name__}")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Â∏ÉÂ±ÄÊ†ëÈáçÂª∫ËøáÁ®ãÂºÇÂ∏∏: {e}")

    def _create_single_stretchable_node(self, component):
        """‰∏∫ÁªÑ‰ª∂ÂàõÂª∫Âçï‰∏™StretchableËäÇÁÇπÔºà‰∏çÈÄíÂΩíÂ§ÑÁêÜÂ≠êÁªÑ‰ª∂Ôºâ"""
        try:
            import stretchable as st

            # Ëé∑ÂèñÁªÑ‰ª∂Ê†∑ÂºèÂπ∂ËΩ¨Êç¢
            component_style = getattr(component, "style", None)
            if not component_style:
                logger.warning(f"‚ö†Ô∏è ÁªÑ‰ª∂Ê≤°ÊúâÊ†∑Âºè: {component.__class__.__name__}")
                # ‰∏∫Ê≤°ÊúâÊ†∑ÂºèÁöÑÁªÑ‰ª∂ÂàõÂª∫ÈªòËÆ§Ê†∑Âºè
                from ..core.styles import ComponentStyle

                component_style = ComponentStyle()
                component.style = component_style
                logger.debug(f"‚ú® ‰∏∫ÁªÑ‰ª∂ÂàõÂª∫ÈªòËÆ§Ê†∑Âºè: {component.__class__.__name__}")

            logger.debug(
                f"üé® ËΩ¨Êç¢Âçï‰∏™ËäÇÁÇπÊ†∑Âºè: {component.__class__.__name__} -> {component_style}"
            )
            stretchable_style = V4StyleConverter.convert_to_stretchable_style(component_style)

            # ÂàõÂª∫ËäÇÁÇπÔºà‰∏çÂ§ÑÁêÜÂ≠êÁªÑ‰ª∂Ôºâ
            node = st.Node(style=stretchable_style)
            logger.debug(f"üìê ÂàõÂª∫Âçï‰∏™StretchableËäÇÁÇπÊàêÂäü: {component.__class__.__name__}")

            return node

        except Exception as e:
            logger.error(f"‚ùå ÂàõÂª∫Âçï‰∏™StretchableËäÇÁÇπÂºÇÂ∏∏: {component.__class__.__name__} - {e}")
            import traceback

            logger.error(f"‚ùå ËØ¶ÁªÜÂºÇÂ∏∏: {traceback.format_exc()}")
            return None

    def _create_stretchable_node_for_component(self, component):
        """‰∏∫ÁªÑ‰ª∂ÂàõÂª∫Á∫ØStretchableËäÇÁÇπÔºà‰∏çÊ∂âÂèäv4Â∏ÉÂ±ÄÁºìÂ≠òÔºâ"""
        try:
            import stretchable as st

            # Ëé∑ÂèñÁªÑ‰ª∂Ê†∑ÂºèÂπ∂ËΩ¨Êç¢
            component_style = getattr(component, "style", None)
            if not component_style:
                logger.warning(f"‚ö†Ô∏è ÁªÑ‰ª∂Ê≤°ÊúâÊ†∑Âºè: {component.__class__.__name__}")
                # ‰∏∫Ê≤°ÊúâÊ†∑ÂºèÁöÑÁªÑ‰ª∂ÂàõÂª∫ÈªòËÆ§Ê†∑Âºè
                from ..core.styles import ComponentStyle

                component_style = ComponentStyle()
                component.style = component_style
                logger.debug(f"‚ú® ‰∏∫ÁªÑ‰ª∂ÂàõÂª∫ÈªòËÆ§Ê†∑Âºè: {component.__class__.__name__}")

            logger.debug(f"üé® ËΩ¨Êç¢Ê†∑Âºè: {component.__class__.__name__} -> {component_style}")
            stretchable_style = V4StyleConverter.convert_to_stretchable_style(component_style)

            # ÂàõÂª∫ËäÇÁÇπ
            node = st.Node(style=stretchable_style)
            logger.debug(f"üìê ÂàõÂª∫StretchableËäÇÁÇπÊàêÂäü: {component.__class__.__name__}")

            # ÈÄíÂΩíÂ§ÑÁêÜÂ≠êÁªÑ‰ª∂
            if hasattr(component, "children"):
                for child_component in component.children:
                    child_node = self._create_stretchable_node_for_component(child_component)
                    if child_node:
                        node.append(child_node)

            return node

        except Exception as e:
            logger.error(f"‚ùå ÂàõÂª∫StretchableËäÇÁÇπÂºÇÂ∏∏: {component.__class__.__name__} - {e}")
            import traceback

            logger.error(f"‚ùå ËØ¶ÁªÜÂºÇÂ∏∏: {traceback.format_exc()}")
            return None

    def update_component_style(self, component):
        """Êõ¥Êñ∞ÁªÑ‰ª∂Ê†∑Âºè"""
        node = self.get_node_for_component(component)
        if node and hasattr(component, "style"):
            node.update_style(component.style)
            logger.debug(f"üé® Êõ¥Êñ∞ÁªÑ‰ª∂Ê†∑Âºè: {component.__class__.__name__}")

    def cleanup_component(self, component):
        """Ê∏ÖÁêÜÁªÑ‰ª∂ÁöÑÂ∏ÉÂ±ÄËäÇÁÇπ"""
        if component in self._component_nodes:
            node = self._component_nodes[component]

            try:
                # ‰ªéÁà∂ËäÇÁÇπÁßªÈô§ - ÈúÄË¶ÅÂÆâÂÖ®Â§ÑÁêÜ
                if hasattr(node, "parent") and node.parent:
                    node.parent.remove_child(node)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Â∏ÉÂ±ÄËäÇÁÇπÊ∏ÖÁêÜË≠¶Âëä: {e}")

            # Ê∏ÖÁêÜÊò†Â∞Ñ
            del self._component_nodes[component]
            logger.debug(f"üßπ Ê∏ÖÁêÜÁªÑ‰ª∂Â∏ÉÂ±ÄËäÇÁÇπ: {component.__class__.__name__}")

    def debug_print_stats(self):
        """ÊâìÂç∞ËØ¶ÁªÜÁöÑË∞ÉËØïÁªüËÆ°‰ø°ÊÅØ"""
        logger.info("üìä Hibiki UI v4 Â∏ÉÂ±ÄÂºïÊìéÁä∂ÊÄÅÊä•Âëä")
        logger.info("=" * 50)
        logger.info(f"üîÑ Â∏ÉÂ±ÄËÆ°ÁÆóË∞ÉÁî®Ê¨°Êï∞: {self._layout_calls}")
        logger.info(f"üìê Ê¥ªË∑ÉÂ∏ÉÂ±ÄËäÇÁÇπÊï∞Èáè: {len(self._component_nodes)}")
        logger.info(f"üß† ÁºìÂ≠òÂêØÁî®Áä∂ÊÄÅ: {self.enable_cache}")
        logger.info(f"üêõ Ë∞ÉËØïÊ®°ÂºèÁä∂ÊÄÅ: {self.debug_mode}")

        # ÂàÜÊûêÁªÑ‰ª∂Á±ªÂûãÂàÜÂ∏É
        component_types = {}
        for component in self._component_nodes.keys():
            comp_type = component.__class__.__name__
            component_types[comp_type] = component_types.get(comp_type, 0) + 1

        if component_types:
            logger.info("üìã ÁªÑ‰ª∂Á±ªÂûãÂàÜÂ∏É:")
            for comp_type, count in sorted(component_types.items()):
                logger.info(f"   {comp_type}: {count}")

        logger.info("=" * 50)

    def health_check(self) -> dict:
        """
        ÊâßË°åÂ∏ÉÂ±ÄÂºïÊìéÂÅ•Â∫∑Ê£ÄÊü•

        Returns:
            dict: ÂåÖÂê´ÂÅ•Â∫∑Áä∂ÊÄÅ‰ø°ÊÅØÁöÑÂ≠óÂÖ∏
        """
        health_status = {
            "healthy": True,
            "total_nodes": len(self._component_nodes),
            "orphaned_nodes": 0,
            "corrupted_references": 0,
            "warnings": [],
        }

        try:
            # Ê£ÄÊü•Â≠§Á´ãËäÇÁÇπ
            for component, node in self._component_nodes.items():
                try:
                    if not node or not node._stretchable_node:
                        health_status["corrupted_references"] += 1
                        health_status["warnings"].append(
                            f"ÁªÑ‰ª∂ {component.__class__.__name__} ÁöÑÂ∏ÉÂ±ÄËäÇÁÇπÊçüÂùè"
                        )
                        continue

                    # Ê£ÄÊü•Áà∂Â≠êÂÖ≥Á≥ª‰∏ÄËá¥ÊÄß
                    if hasattr(component, "parent") and component.parent:
                        parent_node = self.get_node_for_component(component.parent)
                        if parent_node and node not in parent_node.children:
                            health_status["orphaned_nodes"] += 1
                            health_status["warnings"].append(
                                f"ÁªÑ‰ª∂ {component.__class__.__name__} Â≠òÂú®Â≠§Á´ãÁöÑÂ∏ÉÂ±ÄËäÇÁÇπ"
                            )

                except Exception as e:
                    health_status["corrupted_references"] += 1
                    health_status["warnings"].append(
                        f"Ê£ÄÊü•ÁªÑ‰ª∂ {component.__class__.__name__} Êó∂Âá∫Èîô: {e}"
                    )

            # Âà§Êñ≠Êï¥‰ΩìÂÅ•Â∫∑Áä∂ÊÄÅ
            if health_status["corrupted_references"] > 0 or health_status["orphaned_nodes"] > 0:
                health_status["healthy"] = False

        except Exception as e:
            health_status["healthy"] = False
            health_status["warnings"].append(f"ÂÅ•Â∫∑Ê£ÄÊü•ËøáÁ®ãÂá∫Èîô: {e}")

        return health_status

    def cleanup_orphaned_nodes(self) -> int:
        """
        Ê∏ÖÁêÜÂ≠§Á´ãÁöÑÂ∏ÉÂ±ÄËäÇÁÇπ

        Returns:
            int: Ê∏ÖÁêÜÁöÑËäÇÁÇπÊï∞Èáè
        """
        cleaned_count = 0
        components_to_remove = []

        try:
            for component, node in self._component_nodes.items():
                try:
                    # Ê£ÄÊü•ËäÇÁÇπÊòØÂê¶ÊçüÂùè
                    if not node or not node._stretchable_node:
                        components_to_remove.append(component)
                        continue

                    # Ê£ÄÊü•ÁªÑ‰ª∂ÊòØÂê¶ËøòÊúâÊïà
                    if not hasattr(component, "__class__"):
                        components_to_remove.append(component)
                        continue

                except Exception:
                    components_to_remove.append(component)

            # Ê∏ÖÁêÜÊçüÂùèÁöÑÊò†Â∞Ñ
            for component in components_to_remove:
                try:
                    del self._component_nodes[component]
                    cleaned_count += 1
                    logger.debug(f"üßπ Ê∏ÖÁêÜÂ≠§Á´ãËäÇÁÇπ: {component}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Ê∏ÖÁêÜÂ≠§Á´ãËäÇÁÇπÂ§±Ë¥•: {e}")

            if cleaned_count > 0:
                logger.info(f"üßπ Ê∏ÖÁêÜ‰∫Ü {cleaned_count} ‰∏™Â≠§Á´ãÁöÑÂ∏ÉÂ±ÄËäÇÁÇπ")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Â≠§Á´ãËäÇÁÇπÊ∏ÖÁêÜËøáÁ®ãÂºÇÂ∏∏: {e}")

        return cleaned_count

    def get_node_tree_info(self, component) -> dict:
        """
        Ëé∑ÂèñÁªÑ‰ª∂ÁöÑÂ∏ÉÂ±ÄÊ†ë‰ø°ÊÅØÔºàÁî®‰∫éË∞ÉËØïÔºâ

        Returns:
            dict: ÂåÖÂê´Ê†ëÁªìÊûÑ‰ø°ÊÅØÁöÑÂ≠óÂÖ∏
        """
        node = self.get_node_for_component(component)
        if not node:
            return {"error": "Êú™ÊâæÂà∞Â∏ÉÂ±ÄËäÇÁÇπ"}

        try:
            info = {
                "component_type": component.__class__.__name__,
                "node_key": getattr(node, "key", "unknown"),
                "children_count": len(node.children),
                "has_parent": node.parent is not None,
                "stretchable_valid": node._stretchable_node is not None,
                "children": [],
            }

            # ÈÄíÂΩíËé∑ÂèñÂ≠êËäÇÁÇπ‰ø°ÊÅØ
            for child_node in node.children:
                child_component = None
                # ÊâæÂà∞ÂØπÂ∫îÁöÑÁªÑ‰ª∂
                for comp, n in self._component_nodes.items():
                    if n == child_node:
                        child_component = comp
                        break

                if child_component:
                    child_info = self.get_node_tree_info(child_component)
                    info["children"].append(child_info)
                else:
                    info["children"].append({"error": "Êâæ‰∏çÂà∞ÂØπÂ∫îÁöÑÁªÑ‰ª∂"})

            return info

        except Exception as e:
            return {"error": f"Ëé∑ÂèñËäÇÁÇπ‰ø°ÊÅØÊó∂Âá∫Èîô: {e}"}


# ÂÖ®Â±ÄÂ∏ÉÂ±ÄÂºïÊìéÂÆû‰æã
_global_layout_engine: Optional[V4LayoutEngine] = None


def get_layout_engine() -> V4LayoutEngine:
    """Ëé∑ÂèñÂÖ®Â±Äv4Â∏ÉÂ±ÄÂºïÊìéÂÆû‰æã"""
    global _global_layout_engine
    if _global_layout_engine is None:
        _global_layout_engine = V4LayoutEngine(enable_cache=True, debug_mode=True)
    return _global_layout_engine


def set_debug_mode(enabled: bool):
    """ËÆæÁΩÆË∞ÉËØïÊ®°Âºè"""
    get_layout_engine().debug_mode = enabled


# ================================
# ÊµãËØï‰ª£Á†Å
# ================================

if __name__ == "__main__":
    logger.info("Hibiki UI v4.0 Â∏ÉÂ±ÄÂºïÊìéÊµãËØï\n")

    # ÊµãËØïÊ†∑ÂºèËΩ¨Êç¢
    logger.info("üîÑ Ê†∑ÂºèËΩ¨Êç¢ÊµãËØï:")
    # ÂØºÂÖ•Â∑≤ÁªèÂú®Ê®°ÂùóÈ°∂ÈÉ®Â§ÑÁêÜ‰∫Ü

    v4_style = ComponentStyle(
        display=Display.FLEX,
        flex_direction=FlexDirection.ROW,
        align_items=AlignItems.CENTER,
        width=px(300),
        height=px(200),
        margin=px(10),
        gap=px(8),
    )

    stretchable_style = V4StyleConverter.convert_to_stretchable_style(v4_style)
    logger.info(f"‚úÖ ËΩ¨Êç¢ÂÆåÊàê: {stretchable_style}")

    # ÊµãËØïÂ∏ÉÂ±ÄÂºïÊìé
    logger.info("\nüìê Â∏ÉÂ±ÄÂºïÊìéÊµãËØï:")
    engine = get_layout_engine()

    # ÂàõÂª∫ÊµãËØïÁªÑ‰ª∂
    class MockComponent:
        def __init__(self, name: str, style: ComponentStyle):
            self.__class__.__name__ = f"Mock{name}"
            self.style = style

    parent = MockComponent(
        "Parent",
        ComponentStyle(
            display=Display.FLEX, flex_direction=FlexDirection.COLUMN, width=px(400), height=px(300)
        ),
    )

    child1 = MockComponent("Child1", ComponentStyle(width=px(200), height=px(100)))

    child2 = MockComponent("Child2", ComponentStyle(width=px(180), height=px(80)))

    # ÂàõÂª∫Â∏ÉÂ±ÄËäÇÁÇπÂπ∂Âª∫Á´ãÂÖ≥Á≥ª
    engine.create_node_for_component(parent)
    engine.create_node_for_component(child1)
    engine.create_node_for_component(child2)

    engine.add_child_relationship(parent, child1)
    engine.add_child_relationship(parent, child2)

    # ËÆ°ÁÆóÂ∏ÉÂ±Ä
    result = engine.compute_layout_for_component(parent, available_size=(500, 400))
    if result:
        logger.info(
            f"‚úÖ Áà∂ÁªÑ‰ª∂Â∏ÉÂ±Ä: {result.width:.1f}x{result.height:.1f} @ ({result.x:.1f}, {result.y:.1f})"
        )

    # ÊâìÂç∞ÁªüËÆ°
    engine.debug_print_stats()

    logger.info("\n‚úÖ v4Â∏ÉÂ±ÄÂºïÊìéÊµãËØïÂÆåÊàêÔºÅ")
