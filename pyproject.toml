[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hibiki-ui"
version = "0.1.0"
description = "A reactive UI framework for native macOS apps using Python and PyObjC"
readme = "README.md"
license = { file = "LICENSE" }
authors = [{ name = "Hibiki UI Team" }]
maintainers = [{ name = "Hibiki UI Team" }]
keywords = [
    "macos",
    "gui",
    "pyobjc",
    "reactive",
    "ui",
    "cocoa",
    "native",
    "desktop",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Desktop Environment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Framework :: AsyncIO",
]
requires-python = ">=3.11"
dependencies = [
    "pyobjc>=11.1",
    "pyobjc-core>=10.0",
    "pyobjc-framework-cocoa>=10.0",
    "pyobjc-framework-Quartz>=11.0",
    "stretchable>=1.1.7",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "pytest-snapshot>=0.9.0",

    # Linting and formatting
    "ruff>=0.6.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",

    # Documentation
    "sphinx>=8.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=4.0.0",

    # Development tools
    "pre-commit>=3.6.0",
    "twine>=5.0.0",
    "build>=1.0.0",
]

examples = [
    "pillow>=10.0.0", # For image handling in examples
]

full = ["hibiki[dev,examples]"]

[project.urls]
Homepage = "https://github.com/hibiki/hibiki"
Documentation = "https://hibiki.readthedocs.io/"
Repository = "https://github.com/hibiki/hibiki.git"
Issues = "https://github.com/hibiki/hibiki/issues"
Changelog = "https://github.com/hibiki/hibiki/blob/main/CHANGELOG.md"

[project.scripts]
hibiki = "hibiki.cli:main"

# Hatch configuration for building
[tool.hatch.build]
include = [
    "hibiki/**/*.py",
    "examples/**/*.py",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]
exclude = [
    "tests/",
    "docs/",
    "*.pyc",
    "__pycache__/",
    ".git/",
    ".pytest_cache/",
    "*.egg-info/",
]

[tool.hatch.build.targets.wheel]
packages = ["hibiki"]

# Package metadata
[tool.hatch.metadata]
allow-direct-references = true

# Ruff configuration (Python linter and formatter)
[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # flake8-comprehensions
    "C4",
    # flake8-pie
    "PIE",
    # flake8-use-pathlib
    "PTH",
    # flake8-quotes
    "Q",
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "E501", # Line too long (handled by black)
]

[tool.ruff.per-file-ignores]
"examples/**" = [
    "D",    # Don't require docstrings in examples
    "T201", # Allow print statements in examples
]
"tests/**" = [
    "D",    # Don't require docstrings in tests
    "S101", # Allow assert statements in tests
]

[tool.ruff.pydocstyle]
convention = "google"

# Black configuration (code formatter)
[tool.black]
target-version = ["py38", "py39", "py310", "py311", "py312", "py313"]
line-length = 100
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration (import sorter)
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration (type checker)
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["AppKit.*", "Foundation.*", "Quartz.*", "objc.*", "PyObjCTools.*"]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=hibiki",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gui: marks tests that require GUI interaction",
    "macos_only: marks tests that only work on macOS",
]

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["hibiki"]
omit = ["tests/*", "examples/*", "hibiki/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = ["pytest-asyncio>=1.1.0", "pytest-mock>=3.14.1", "pytest-snapshot>=0.9.0"]

# Pre-commit hooks configuration (separate file recommended)
# To use pre-commit, create a .pre-commit-config.yaml file
